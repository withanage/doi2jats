--- a/src/Core/Application/ConsoleApplication.php
+++ b/src/Core/Application/ConsoleApplication.php
@@ -33,7 +33,7 @@ class ConsoleApplication
     /**
      * Run the application
      */
-    public function run(array $args): void
+    public function run(array<string> $args): void
     {
         try {
             $parsedArgs = $this->parseArguments($args);
@@ -84,7 +84,7 @@ class ConsoleApplication
     /**
      * Parse command line arguments
      */
-    private function parseArguments(array $args): array
+    private function parseArguments(array<string> $args): array<string, mixed>
     {
         $parsed = [
             'dois' => [],
@@ -129,7 +129,7 @@ class ConsoleApplication
     /**
      * Process multiple DOIs
      */
-    private function processDois(array $dois): void
+    private function processDois(array<string> $dois): void
     {
         $citations = [];
         $errors = [];
@@ -162,7 +162,7 @@ class ConsoleApplication
     /**
      * Output results based on format
      */
-    private function outputResults(array $citations, array $errors): void
+    private function outputResults(array<string, mixed> $citations, array<string, string> $errors): void
     {
         switch ($this->format) {
             case 'individual':
@@ -185,7 +185,7 @@ class ConsoleApplication
     /**
      * Output individual citations
      */
-    private function outputIndividual(array $citations, array $errors): void
+    private function outputIndividual(array<string, mixed> $citations, array<string, string> $errors): void
     {
         foreach ($citations as $doi => $citation) {
             echo "DOI: {$doi}\n";
@@ -197,7 +197,7 @@ class ConsoleApplication
     /**
      * Output combined citations
      */
-    private function outputCombined(array $citations, array $errors): void
+    private function outputCombined(array<string, mixed> $citations, array<string, string> $errors): void
     {
         $combined = [];
         foreach ($citations as $citation) {
@@ -222,7 +222,7 @@ class ConsoleApplication
     /**
      * Output bibliography format
      */
-    private function outputBibliography(array $citations, array $errors): void
+    private function outputBibliography(array<string, mixed> $citations, array<string, string> $errors): void
     {
         echo "<bibliography>\n";
         foreach ($citations as $citation) {
@@ -251,7 +251,7 @@ class ConsoleApplication
     /**
      * Output summary statistics
      */
-    private function outputSummary(array $citations, array $errors): void
+    private function outputSummary(array<string, mixed> $citations, array<string, string> $errors): void
     {
         $total = count($citations) + count($errors);
         $successful = count($citations);

--- a/src/Domain/Citation/CitationData.php
+++ b/src/Domain/Citation/CitationData.php
@@ -6,7 +6,7 @@ class CitationData implements CitationDataInterface
 {
     public function __construct(
         private string $title,
-        private array $authors,
+        private array<string> $authors,
         private string $journal,
         private string $year,
         private string $doi,
@@ -22,7 +22,7 @@ class CitationData implements CitationDataInterface
     /**
      * Create instance from array data
      */
-    public static function fromArray(array $data): self
+    public static function fromArray(array<string, mixed> $data): self
     {
         return new self(
             title: $data['title'] ?? '',
@@ -44,7 +44,7 @@ class CitationData implements CitationDataInterface
         return $this->title;
     }
 
-    public function getAuthors(): array
+    public function getAuthors(): array<string>
     {
         return $this->authors;
     }

--- a/src/Domain/Citation/CitationDataInterface.php
+++ b/src/Domain/Citation/CitationDataInterface.php
@@ -7,7 +7,7 @@ interface CitationDataInterface
 {
     public function getTitle(): string;
     
-    public function getAuthors(): array;
+    public function getAuthors(): array<string>;
     
     public function getJournal(): string;
     

--- a/src/Domain/Doi/DoiValidator.php
+++ b/src/Domain/Doi/DoiValidator.php
@@ -25,10 +25,13 @@ class DoiValidator
      */
     public function validate(?string $doi): string
     {
+        if ($doi === null) {
+            throw new InvalidDoiException('DOI cannot be null');
+        }
+        
         if (!preg_match(self::DOI_PATTERN, $doi)) {
-            throw new InvalidDoiException($doi);
+            throw new InvalidDoiException($doi);
         }
         
-        return $doi;
+        return $doi;
     }
 }

--- a/src/Domain/Provider/CitationProviderInterface.php
+++ b/src/Domain/Provider/CitationProviderInterface.php
@@ -9,5 +9,5 @@ interface CitationProviderInterface
     /**
      * Get citation data for a DOI
      */
-    public function getCitationData(string $doi): array;
+    public function getCitationData(string $doi): array<string, mixed>;
 }

--- a/src/Domain/Provider/XmlBuilderInterface.php
+++ b/src/Domain/Provider/XmlBuilderInterface.php
@@ -9,5 +9,5 @@ interface XmlBuilderInterface
     /**
      * Build XML citation from citation data
      */
-    public function buildCitation(array $citationData): string;
+    public function buildCitation(array<string, mixed> $citationData): string;
 }

--- a/src/Infrastructure/Provider/AbstractCitationProvider.php
+++ b/src/Infrastructure/Provider/AbstractCitationProvider.php
@@ -10,9 +10,9 @@ abstract class AbstractCitationProvider implements CitationProviderInterface
 {
     protected CurlHttpClient $httpClient;
     
-    protected array $defaultHeaders;
+    protected array<string, string> $defaultHeaders;
     
-    public function __construct(CurlHttpClient $httpClient, array $defaultHeaders = [])
+    public function __construct(CurlHttpClient $httpClient, array<string, string> $defaultHeaders = [])
     {
         $this->httpClient = $httpClient;
         $this->defaultHeaders = $defaultHeaders;
@@ -23,7 +23,7 @@ abstract class AbstractCitationProvider implements CitationProviderInterface
      * 
      * @throws CitationProviderException
      */
-    protected function makeRequest(string $url, array $headers = []): array
+    protected function makeRequest(string $url, array<string, string> $headers = []): array<string, mixed>
     {
         try {
             $response = $this->httpClient->get($url, $this->buildHeaders($headers));
@@ -51,7 +51,7 @@ abstract class AbstractCitationProvider implements CitationProviderInterface
     /**
      * Build headers for request
      */
-    private function buildHeaders(array $headers): array
+    private function buildHeaders(array<string, string> $headers): array<string, string>
     {
         return array_merge($this->defaultHeaders, $headers);
     }
@@ -64,7 +64,7 @@ abstract class AbstractCitationProvider implements CitationProviderInterface
     /**
      * Transform raw API data to standardized format
      */
-    abstract protected function transformData(array $rawData): array;
+    abstract protected function transformData(array<string, mixed> $rawData): array<string, mixed>;
 }

--- a/src/Infrastructure/Provider/CrossrefProvider.php
+++ b/src/Infrastructure/Provider/CrossrefProvider.php
@@ -13,7 +13,7 @@ class CrossrefProvider extends AbstractCitationProvider
     /**
      * Get citation data from Crossref API
      */
-    public function getCitationData(string $doi): array
+    public function getCitationData(string $doi): array<string, mixed>
     {
         $url = self::API_BASE_URL . urlencode($doi);
         
@@ -35,7 +35,7 @@ class CrossrefProvider extends AbstractCitationProvider
     /**
      * Transform Crossref data to standardized format
      */
-    protected function transformData(array $rawData): array
+    protected function transformData(array<string, mixed> $rawData): array<string, mixed>
     {
         $work = $rawData['message'] ?? [];
         
@@ -65,7 +65,7 @@ class CrossrefProvider extends AbstractCitationProvider
     /**
      * Extract page data from Crossref response
      */
-    private function extractPageData(): array
+    private function extractPageData(): array<string, string>
     {
         return [
             'first_page' => '',

--- a/src/Infrastructure/Provider/OpenAlexProvider.php
+++ b/src/Infrastructure/Provider/OpenAlexProvider.php
@@ -13,7 +13,7 @@ class OpenAlexProvider extends AbstractCitationProvider
     /**
      * Get citation data from OpenAlex API
      */
-    public function getCitationData(string $doi): array
+    public function getCitationData(string $doi): array<string, mixed>
     {
         $url = self::API_BASE_URL . urlencode($doi);
         
@@ -34,7 +34,7 @@ class OpenAlexProvider extends AbstractCitationProvider
     /**
      * Transform OpenAlex data to standardized format
      */
-    protected function transformData(array $rawData): array
+    protected function transformData(array<string, mixed> $rawData): array<string, mixed>
     {
         $work = $rawData['results'][0] ?? [];
         
@@ -68,7 +68,7 @@ class OpenAlexProvider extends AbstractCitationProvider
     /**
      * Extract date from OpenAlex publication date
      */
-    private function extractDate(): array
+    private function extractDate(): array<string, string>
     {
         return [
             'year' => '',

--- a/src/Infrastructure/Xml/JatsXmlBuilder.php
+++ b/src/Infrastructure/Xml/JatsXmlBuilder.php
@@ -20,7 +20,7 @@ class JatsXmlBuilder implements XmlBuilderInterface
     /**
      * Build JATS XML citation from citation data
      */
-    public function buildCitation(array $citationData): string
+    public function buildCitation(array<string, mixed> $citationData): string
     {
         $dom = new DOMDocument('1.0', 'UTF-8');
         $dom->formatOutput = true;
@@ -40,7 +40,7 @@ class JatsXmlBuilder implements XmlBuilderInterface
     /**
      * Add authors to citation element
      */
-    private function addAuthors(DOMElement $citation, array $authors): void
+    private function addAuthors(DOMElement $citation, array<string> $authors): void
     {
         if (empty($authors)) {
             return;